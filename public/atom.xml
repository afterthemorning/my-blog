<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Raul Tang&#39;s Blog</title>
  <subtitle>Raul Tang&#39;s Blog, 梦想成为一名顶尖的工程师，我行我素的穿梭在时光旅行中.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.raultang.com/"/>
  <updated>2017-05-11T08:20:22.279Z</updated>
  <id>http://blog.raultang.com/</id>
  
  <author>
    <name>Raul Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Front-End Developer Handbook 2017</title>
    <link href="http://blog.raultang.com/Front-End-Developer-book/handbook/Front-End-Developer-Handbook-2017/"/>
    <id>http://blog.raultang.com/Front-End-Developer-book/handbook/Front-End-Developer-Handbook-2017/</id>
    <published>2017-04-20T06:24:17.160Z</published>
    <updated>2017-05-11T08:20:22.279Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介-amp-前言"><a href="#简介-amp-前言" class="headerlink" title="简介&amp;前言"></a>简介&amp;前言</h4><p>一直都在不断的寻找，可以系统学习前端知识的资料，最近找到一个写的比较专业的 - Front-End Developer Handbook 2017</p>
<p>目前才看了前几章，总体来说还是很专业的，有很多的知识点，有以前不知道的，比较新的技术，框架等。</p>
<p>正如他们官方的介绍:</p>
<p>This is a guide that anyone could use to learn about the practice of front-end development. It broadly outlines and discusses the practice of front-end engineering: how to learn it and what tools are used when practicing it in 2017.</p>
<p>You’ve got the basics down and don’t want to learn from teachers who just spoon feed you their google results – you want to learn from the masters! Here, you get experts as teachers。</p>
<p>想要成为大师级的前端工程师，可以从这里开始:<br>从最基础的前端工程师的定义，到各科各门的具体技术说明都有。</p>
<a id="more"></a>
<p>以后把学习的笔记写也在此篇博客当中，让这篇文章变得更充实，更有意义。</p>
<p>附录:</p>
<p><a href="https://frontendmasters.com/" target="_blank" rel="external">Front-End Master</a> - <a href="https://frontendmasters.com/" target="_blank" rel="external">https://frontendmasters.com/</a><br><a href="https://frontendmasters.com/books/front-end-handbook/2017/" target="_blank" rel="external">Front-End Developer Handbook</a> - <a href="https://frontendmasters.com/books/front-end-handbook/2017/。" target="_blank" rel="external">https://frontendmasters.com/books/front-end-handbook/2017/。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介-amp-前言&quot;&gt;&lt;a href=&quot;#简介-amp-前言&quot; class=&quot;headerlink&quot; title=&quot;简介&amp;amp;前言&quot;&gt;&lt;/a&gt;简介&amp;amp;前言&lt;/h4&gt;&lt;p&gt;一直都在不断的寻找，可以系统学习前端知识的资料，最近找到一个写的比较专业的 - Front-End Developer Handbook 2017&lt;/p&gt;
&lt;p&gt;目前才看了前几章，总体来说还是很专业的，有很多的知识点，有以前不知道的，比较新的技术，框架等。&lt;/p&gt;
&lt;p&gt;正如他们官方的介绍:&lt;/p&gt;
&lt;p&gt;This is a guide that anyone could use to learn about the practice of front-end development. It broadly outlines and discusses the practice of front-end engineering: how to learn it and what tools are used when practicing it in 2017.&lt;/p&gt;
&lt;p&gt;You’ve got the basics down and don’t want to learn from teachers who just spoon feed you their google results – you want to learn from the masters! Here, you get experts as teachers。&lt;/p&gt;
&lt;p&gt;想要成为大师级的前端工程师，可以从这里开始:&lt;br&gt;从最基础的前端工程师的定义，到各科各门的具体技术说明都有。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End Developer book" scheme="http://blog.raultang.com/categories/Front-End-Developer-book/"/>
    
      <category term="handbook" scheme="http://blog.raultang.com/categories/Front-End-Developer-book/handbook/"/>
    
    
      <category term="Front-End" scheme="http://blog.raultang.com/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器相关配置</title>
    <link href="http://blog.raultang.com/TECH/Nginx/nginx-configurations-guide/"/>
    <id>http://blog.raultang.com/TECH/Nginx/nginx-configurations-guide/</id>
    <published>2017-03-12T03:06:41.000Z</published>
    <updated>2017-03-14T03:47:12.677Z</updated>
    
    <content type="html"><![CDATA[<p>最近在折腾并学习阿里云平台，搭建部署了一个站点，考虑安全的问题，需要部署SSL证书。<br>经过了解，目前国内有多家公司都提供免费的SSL证书，可以安装到自己的服务器。由于自己搭建是基于Nginx的，<br>自己就顺便学习了一下Nginx的相关配置。</p>
<h5 id="1-免费证书供应商"><a href="#1-免费证书供应商" class="headerlink" title="1. 免费证书供应商"></a>1. 免费证书供应商</h5><p>   国内的免费SSL证书的服务商，我发现还是有很多家的，阿里云,百度云加速，360等等。大家可以根据自己的服务器的实际情况来选择。</p>
<h5 id="2-申请-安装证书"><a href="#2-申请-安装证书" class="headerlink" title="2. 申请/安装证书"></a>2. 申请/安装证书</h5><p>   由于服务器的架构是LNMT Stack（Linux-Nginx-MySQL-Tomcat）, 所以此次我们需要配置的是Nginx的相关配置.</p>
<p>   首先，登录自己的<a href="https://www.aliyun.com" target="_blank" rel="external">阿里云</a> - <a href="https://www.aliyun.com" target="_blank" rel="external">https://www.aliyun.com</a> 账户，在安全（云盾）中找到 证书服务 –&gt; 购买证书.</p>
<p>   以下是可以购买的证书类型，选择免费型DV SSL即可，证书是Symantec颁发的，免费型证书只能保护一个域名或字域名，一次1年，可以无限购买。<br>   只要你有足够多服务器和域名需要绑定。</p>
   <a id="more"></a>
<p>   DV SSL: 即Domain Validation SSL 或 超快 SSL，只验证域名所有权， 10分钟颁发，保证了网站的机密信息从用户浏览器到服务器之间的传输是高强度加密传输的，是不会被非法窃取和非法篡改的，但由于只验证域名，此证书仅起到加密传输信息的作用，并不能证明网站的真实身份。</p>
<p>   根据以上描述:此类证书并不是很安全，一般最好只用于个人/或者企业展示网站，如果预算够的情况下，还是建议购买更好的证书，当然相应的认证更加严格，也比较可信。</p>
   <img src="/TECH/Nginx/nginx-configurations-guide/buy_ssl_certificate.PNG" alt="buy_ssl_certificate" title="buy_ssl_certificate">
<p>   如果本身是使用的阿里云的服务器，再购买阿里云的SSL证书，可以比较方便的生成和安装。这一点还是很不错的。</p>
<h5 id="3-安全配置"><a href="#3-安全配置" class="headerlink" title="3. 安全配置"></a>3. 安全配置</h5><pre><code>先了解一下Nginx的相关配置：

默认配置文件和Nginx端口
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/conf/ – Nginx配置文件目录，/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf是主配置文件</div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span>/nginx/html/ – 默认网站文件位置</div><div class="line"></div><div class="line">/usr/<span class="built_in">local</span>/nginx/logs/ – 默认日志文件位置</div></pre></td></tr></table></figure>

Nginx HTTP默认端口 : TCP 80
Nginx HTTPS默认端口: TCP 443

将会输出以下信息：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</div><div class="line">configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</div></pre></td></tr></table></figure>

如果我们完成一次nginx.conf文件的编辑，只需要执行以下命令来重新加载配置文件，不需要重起停止或重起Nginx。

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure>

执行以下命令来停止服务器。
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx <span class="_">-s</span> stop</div></pre></td></tr></table></figure>

本次，我们需要配置的文件就是/usr/local/nginx/conf/nginx.conf.
关于链接到服务器的工具，我使用的是 MobaXterm - free Xserver and tabbed SSH client for Windows.个人觉得还是很好使的。

我们可以使用以下命令进行编辑:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>

默认情况下，该配置文件中没有配置SSL的安全配置。
</code></pre><h5 id="4-下载-安装证书"><a href="#4-下载-安装证书" class="headerlink" title="4. 下载/安装证书"></a>4. 下载/安装证书</h5><pre><code>我们可以选择阿里云系统生成证书，也可以自己生成相应的公钥和私钥。

( 1 ): 在Nginx的安装目录下创建cert目录，并且将下载的全部文件拷贝到cert目录中。
       如果申请证书时是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并且命名为yourcertificatename.key；

( 2 ) 打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到：

      我们需要添加以下配置，个人建议如果不太清楚如何编写此配置，可以复制一份HTTP 80端口的配置，然后修改监听端口和增加ssl开头的相关配置参数。
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name localhost;</div><div class="line">    ssl on;</div><div class="line">    root html;</div><div class="line">    index index.html index.htm;</div><div class="line">    ssl_certificate   cert/cert.pem;</div><div class="line">    ssl_certificate_key  cert/cert.key;</div><div class="line">    ssl_session_timeout 5m;</div><div class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    location / &#123;</div><div class="line">        root html;</div><div class="line">        index index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

保存以上配置，然后执行Nginx配置重载命令。然后通过 https 方式访问您的站点，测试站点证书的安装配置。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在折腾并学习阿里云平台，搭建部署了一个站点，考虑安全的问题，需要部署SSL证书。&lt;br&gt;经过了解，目前国内有多家公司都提供免费的SSL证书，可以安装到自己的服务器。由于自己搭建是基于Nginx的，&lt;br&gt;自己就顺便学习了一下Nginx的相关配置。&lt;/p&gt;
&lt;h5 id=&quot;1-免费证书供应商&quot;&gt;&lt;a href=&quot;#1-免费证书供应商&quot; class=&quot;headerlink&quot; title=&quot;1. 免费证书供应商&quot;&gt;&lt;/a&gt;1. 免费证书供应商&lt;/h5&gt;&lt;p&gt;   国内的免费SSL证书的服务商，我发现还是有很多家的，阿里云,百度云加速，360等等。大家可以根据自己的服务器的实际情况来选择。&lt;/p&gt;
&lt;h5 id=&quot;2-申请-安装证书&quot;&gt;&lt;a href=&quot;#2-申请-安装证书&quot; class=&quot;headerlink&quot; title=&quot;2. 申请/安装证书&quot;&gt;&lt;/a&gt;2. 申请/安装证书&lt;/h5&gt;&lt;p&gt;   由于服务器的架构是LNMT Stack（Linux-Nginx-MySQL-Tomcat）, 所以此次我们需要配置的是Nginx的相关配置.&lt;/p&gt;
&lt;p&gt;   首先，登录自己的&lt;a href=&quot;https://www.aliyun.com&quot;&gt;阿里云&lt;/a&gt; - &lt;a href=&quot;https://www.aliyun.com&quot;&gt;https://www.aliyun.com&lt;/a&gt; 账户，在安全（云盾）中找到 证书服务 –&amp;gt; 购买证书.&lt;/p&gt;
&lt;p&gt;   以下是可以购买的证书类型，选择免费型DV SSL即可，证书是Symantec颁发的，免费型证书只能保护一个域名或字域名，一次1年，可以无限购买。&lt;br&gt;   只要你有足够多服务器和域名需要绑定。&lt;/p&gt;
    
    </summary>
    
      <category term="TECH" scheme="http://blog.raultang.com/categories/TECH/"/>
    
      <category term="Nginx" scheme="http://blog.raultang.com/categories/TECH/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://blog.raultang.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用Excel技巧进行数据比较</title>
    <link href="http://blog.raultang.com/Tutorial/Excel-Compare/excel-spreadsheet-compare/"/>
    <id>http://blog.raultang.com/Tutorial/Excel-Compare/excel-spreadsheet-compare/</id>
    <published>2017-03-06T10:38:06.000Z</published>
    <updated>2017-03-14T03:36:24.206Z</updated>
    
    <content type="html"><![CDATA[<p>很多职业表亲都有过这样的经历：辛辛苦苦做完了表格发给上级去审核修改，上级修改完后就发回来，我们自己再做审核，最后发布。然而可能有些上级比较懒，改动了很多数据却没有做任何标记和说明，难道你要去一个一个的问你的上司吗？这不职业，而且也不大可能。在IT行业中，我们也会经常处理Excel表格，所以这些技巧也我们必备技能。</p>
<a id="more"></a>
<h4 id="技巧1-利用-Spreadsheet-Camprare-一秒钟识别差异数据"><a href="#技巧1-利用-Spreadsheet-Camprare-一秒钟识别差异数据" class="headerlink" title="技巧1.利用 Spreadsheet Camprare 一秒钟识别差异数据"></a>技巧1.利用 Spreadsheet Camprare 一秒钟识别差异数据</h4><p>如下图所示，我们如何快速比对我们自己做的表格和上司修改后的表格的差异呢？这里首先来介绍一个非常棒的工具：Spreadsheet Compare 2013/2016。是Excel自带的一款数据比对工具，这个工具可以高效地帮助我们比对多个Excel工作簿（结构相同）之间的差异。那么这个工具都有什么样的使用技巧呢？我这里就抛砖引玉地来介绍一下：</p>
<img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare.jpg" alt="Spreadsheet_Camprare" title="Spreadsheet_Camprare">
<p>如何快速找到领导修改的内容？</p>
<p>1.单击windows 系统“开始”按钮，输入“Spreadsheet Compare 2013”,找到此工具（在最上方），单击打开；</p>
<img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step1.jpg" alt="Spreadsheet_Camprare_step1" title="Spreadsheet_Camprare_step1">
<p>找到这个工具，只有Excel2013/2016都有哦</p>
<p>2.现在Spreadsheet Compare2013这个数据差异比对工具以及打开，它的布局由工具栏、表格展示区、差异内容区等部分组成；</p>
<img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step2.jpg" alt="Spreadsheet_Camprare_step2" title="Spreadsheet_Camprare_step2">
<p>3.单击“home”正下方的”Compare Files”,打开对比文件选择对话框，分别选择自己发给领导的表格和领导发回来的表格，单击确定；</p>
<img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step3.jpg" alt="Spreadsheet_Camprare_step3" title="Spreadsheet_Camprare_step3">
<p>选择对比的两个表格，源表格和目标表格</p>
<img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step4.jpg" alt="Spreadsheet_Camprare_step4" title="Spreadsheet_Camprare_step4">
<p>这就是对比结果</p>
<p>4.现在我们就可以看到对比结果了，领导改了哪些东西一目了然。那么如果我们想将结果导出到Excel表格中去看怎么做呢？<br><img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step5.jpg" alt="Spreadsheet_Camprare_step5" title="Spreadsheet_Camprare_step5"></p>
<p>细看图中说明</p>
<p>5.单击工具栏上的“Export Results”，打开保存对话框，选择相应的文件存放位置和输入文件名，单击确定即可导出结果。<br><img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step6.jpg" alt="Spreadsheet_Camprare_step6" title="Spreadsheet_Camprare_step6"></p>
<p>导出结果<br><img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step7.jpg" alt="Spreadsheet_Camprare_step7" title="Spreadsheet_Camprare_step7"></p>
<p>选择合适的存放位置:<br><img src="/Tutorial/Excel-Compare/excel-spreadsheet-compare/Spreadsheet_Camprare_step8.jpg" alt="Spreadsheet_Camprare_step8" title="Spreadsheet_Camprare_step8"></p>

<p>这就上司改了的内容了<br><strong> 注意：相互比较的两个Excel工作簿结构要一致，包括sheet的数目等。</strong></p>
<h4 id="技巧2-利用高级筛选快速比对两个表格之间的差异"><a href="#技巧2-利用高级筛选快速比对两个表格之间的差异" class="headerlink" title="技巧2.利用高级筛选快速比对两个表格之间的差异"></a>技巧2.利用高级筛选快速比对两个表格之间的差异</h4><p>高级筛选是Excel中特别重要的功能之一，其应用范围已经不仅仅局限于筛选数据了，之前的文章中我提到过高级筛选的诸多经典应用案例。今天我在此补充一个，利用高级筛选快速比对Excel工作表的数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">技巧：</div><div class="line">　　1.选中修改后的表格中的任意单元格，单击“数据”选项卡，然后单击筛选按钮旁边的 高级（这就是高级筛选）,打开高级筛选对话框，这一步也可以直接用快捷键（Alt+A+Q);</div><div class="line">　　2.我们看见修改后的表格已经被完全选中，单击下方的条件区域框的折叠按钮，选择修改前的表格,单击确定。</div><div class="line">　　3.选中筛选后的表格，然后按下Alt+;组合键，只选中可见单元格，设置填充为红色；</div><div class="line">　　4.单击“数据”选项卡，再单击”筛选“旁边的”清除“按钮。这时候没有填充色的行就是领导修改过的数据了。</div></pre></td></tr></table></figure>
<p>高级筛选搞定数据比对是很轻松的事儿, 个人觉得第二个比较高端。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多职业表亲都有过这样的经历：辛辛苦苦做完了表格发给上级去审核修改，上级修改完后就发回来，我们自己再做审核，最后发布。然而可能有些上级比较懒，改动了很多数据却没有做任何标记和说明，难道你要去一个一个的问你的上司吗？这不职业，而且也不大可能。在IT行业中，我们也会经常处理Excel表格，所以这些技巧也我们必备技能。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="http://blog.raultang.com/categories/Tutorial/"/>
    
      <category term="Excel Compare" scheme="http://blog.raultang.com/categories/Tutorial/Excel-Compare/"/>
    
    
      <category term="Excel" scheme="http://blog.raultang.com/tags/Excel/"/>
    
      <category term="Spreadsheet Camprare" scheme="http://blog.raultang.com/tags/Spreadsheet-Camprare/"/>
    
  </entry>
  
  <entry>
    <title>个人职业发展</title>
    <link href="http://blog.raultang.com/Career-Development/programer-career-plan/"/>
    <id>http://blog.raultang.com/Career-Development/programer-career-plan/</id>
    <published>2017-02-15T03:06:41.000Z</published>
    <updated>2017-03-14T03:03:37.379Z</updated>
    
    <content type="html"><![CDATA[<img src="/Career-Development/programer-career-plan/Career-Development-Journey-Map-V2.jpg" alt="career_development_map" title="career_development_map">
<!--
学无止境，今天在探索新的知识的时候，翻到到以前读过的一本书，《程序员跳槽全攻略》，现在已经叫《程序员必读的职业规划书》了。
以前是看是百度阅读活动，电子版本的，记得是付了1分钱就能阅读，如今有了我的小博客，也记录并分享一下吧。如果有小伙伴看到了，希望能有所帮助。

里面聊到的东西，我觉得还是非常实用，不灌鸡汤，不瞎扯，个人觉得很有用的。总那么一两条能够实装到自己的身上。


#### 自己的职业发展方向


其实，从高中开始就开始鼓捣编程了，那时候只是非常简单的，在图书馆里面，找了找一些程序方面的书籍，但也不非常哪一个好，或者可以说完全还没有什么概念。只是觉得软件都好炫酷。能做出那么多的有意思的东西。
直至大学都是报的软件技术专业。到现在已经工作3年有余了，也是时常对自己的职业发展，感到迷茫，不知道该如何走下去，困扰着自己，觉得自己还有很多方面的不足，碎片化的看了很多资料。

我想说，资料真的是太多了，发现了一个又一个的资料网站，特别多，先是看国内的，然后国外的。还是觉得国外的资料比较深入一些。

以前，遇到过很多问题，自己研究了很久，然后找到了解决方案，但是经过时间的摧残，脑细胞的是死亡，忘记了很多....

个人建议职业发展是:

1. 找一家好一点儿的公司，至少规范的公司，进行入门。

-->
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/Career-Development/programer-career-plan/Career-Development-Journey-Map-V2.jpg&quot; alt=&quot;career_development_map&quot; title=&quot;career_develo
    
    </summary>
    
      <category term="Career Development" scheme="http://blog.raultang.com/categories/Career-Development/"/>
    
    
      <category term="Career Development" scheme="http://blog.raultang.com/tags/Career-Development/"/>
    
  </entry>
  
  <entry>
    <title>如何正确回复与应对客户或顾客的投诉</title>
    <link href="http://blog.raultang.com/Entrepreneur/how-to-write-a-good-response-to-a-clientcustomer-complaint/"/>
    <id>http://blog.raultang.com/Entrepreneur/how-to-write-a-good-response-to-a-clientcustomer-complaint/</id>
    <published>2017-01-09T07:21:32.000Z</published>
    <updated>2017-01-09T10:29:07.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="How-to-write-a-good-response-to-a-client-customer-complaint"><a href="#How-to-write-a-good-response-to-a-client-customer-complaint" class="headerlink" title="How to write a good response to a client/customer complaint"></a>How to write a good response to a client/customer complaint</h4><p>今天在<a href="https://www.sitepoint.com" target="_blank" rel="external">Sitepoint</a> - <a href="https://www.sitepoint.com" target="_blank" rel="external">https://www.sitepoint.com</a> 看到了这一篇文章，觉得还不错，所以尝试翻译成了中文版，供以后参考。</p>
<p>在日常工作我们常常会遇到各种各样的客户投诉。</p>
<p>也许你的产品或者服务都是最一流的！也许你的客户也是最好的！</p>
<p>但是最终还是避免不了，因为我们始终都会遇到客户投诉。</p>
<p>今天，我们就来讨论一下为什么顾客或客户的投诉对于我们的业务来说是一笔巨大的资产，并且通过一封投诉回复邮件示例来说明.</p>
<a id="more"></a>
<h5 id="Why-Customer-Complaints-Are-Retention-Gold"><a href="#Why-Customer-Complaints-Are-Retention-Gold" class="headerlink" title="Why Customer Complaints Are Retention Gold"></a>Why Customer Complaints Are Retention Gold</h5><p>如果一个企业想要取得长期的成功，对于任何的业务合作来说能够留住客户是最高优先级的。</p>
<ul>
<li>回头客的价值要比他们初次购买的价值的10倍还要多;                –&gt; 回头客很重要!</li>
<li>相对于现有客户来说，我们要花费7倍甚至更多的代价来赢取一个新客户;</li>
<li>相对新客户来说，我们更容易将产品销售给现有客户;</li>
</ul>
<p>所以，我们的目标是留住客户，那为什么说顾客投诉是非常有价值的呢？短期来说，顾客的的投诉就像是一座有价值的数据金矿一样，会帮助我们更加的了解我们的客户群体，从而增加回头客.</p>
<p>在投诉的顾客当中，大部分的人情愿保持沉默。</p>
<p>换句话说，投诉给了我们察觉一些普遍存在或者我们不曾了解的问题，当我们的顾客在投诉或抱怨时，其实是他们在积极的教导我们如果提升产品质量。</p>
<p>另外，当我们成功的解决了顾客的投诉时，我们会增加再与此顾客做生意的机率，如果他们从未进行过任何投诉或抱怨，则不能。</p>
<p>关键词条：在于我们能 “Successfully Resolve”，我们会在接下的章节进行说明。</p>
<h5 id="How-to-Respond-to-a-Customer-Complaint"><a href="#How-to-Respond-to-a-Customer-Complaint" class="headerlink" title="How to Respond to a Customer Complaint"></a>How to Respond to a Customer Complaint</h5><p><strong> 当我们对顾客的投诉做出响应时，我们应当做到以下四个要点: </strong></p>
<ul>
<li>1.针对顾客提出来的问题进行答复, 不能答非所问;</li>
<li>2.向顾客道歉并承认我们的错误;</li>
<li>3.明确的说明你打算如何处理并使其能够得到解决;</li>
<li>4.提出以后你将如何提升用户体验，确保此类事件不再发生;</li>
</ul>
<p>任何一个顾客都不想要模糊不清或者没有答复（我平时也会遇到一些问题需要，提一个在线的技术支持,也会等待几天，甚至几周都没有答复)，一般这种情况都会惹恼顾客，带给他一些非常不好的体验。如果我们准备解答的时候，最好想好要怎么说，说要到点子上。</p>
<p>首先，根据实事描述顾客投诉的每一部分或重点，如果投诉的内容不是很多，可以一一解答，如果内容超级长，尽量挑重要的点进行解答。</p>
<p>接下来，承认属于我方造成的错误或者可以做的更好的地方，如果是一个合法的错误，要进行致歉。如果你的客户很困惑，但大多数人都能理解,也是要先进行致歉，表达我们做的不好，不够通俗易懂。</p>
<p>最重要的是，让一切朝着好的方向走，解决当前的问题！告诉顾客我们会怎么做，从而确保顾客能够愉快的接受。</p>
<p>最后，告诉我们的顾客，在未来我们会将做的更好。在一些问题中，我们会做一些调整或改变。在另一些问题中，可能会要求顾客去更好的理解我们的产品，因为顾客没有理解到产品，造成错误的投诉。</p>
<p>无论哪一种情况，我们要机智的给出一个好个解决方案，确保顾客在接下的体验当中，转变成为一个积极的状态。</p>
<p><strong> 为了更好的理解以上的观点，我们来看一个实际的案例 </strong></p>
<hr>
<p>接下的内容，我根据自己的理解进行翻译了，但是基本不会原文大意大相径庭.</p>
<p>有一个叫Andrew Neitlich的人，使用的Yahoo的广告服务，但是没有得到理想的服务。然后，他就写了一封投诉信给雅虎公司，本来，他并没有期待，这么大的公司会给他一个回复或者解答。但是Yahoo公司居然回复了他，并且收到一封写的很好的答复信。</p>
<p>这一封答复信基本使用到了以上的观点，很好的处理了顾客的投诉，我觉得应该说是安抚了顾客的情绪。可能没有直接的解决问题，但至少顾客受到了尊重。<br>（实际生活能回复的，聊聊无几，毕竟客服是需要人工的，一般付费客户都会得到解答的）- 个人体会</p>
<p>(不翻译邮件了,感觉翻译了就失去味道了,哈哈)</p>
<p>英文原文:</p>
<blockquote><p>Dear Andrew,</p>
<p>I sincerely apologize for any inconvenience these issues may have caused you. I have taken the liberty of resubmitting your listings that were incorrectly declined for Broken Site. According to my research, your listings that were declined for Blocked Site were also declined for Duplication of Results. This means that the keywords that you were attempting to add to your account, already existed in your account, and were seen as a duplicate of an existing listing. This means that the keywords you were hoping to add already exist in your account.</p>
<p>You are correct, after further review it was acknowledged that your site does not offer a product of service that Yahoo! does not to be affiliated with, and therefore the Blocked Site decline reason was an incorrect one. This decline reason did not affect the outcome of your submission.</p>
<p>The keywords that were declined for Insufficient Content, were declined correctly. You were attempting to bid on keywords like “business coach executive professional,” and “life and business coach,” but it is not clear if a user can actually find a business coach on your site, or if they will be referred to 3rd party for assistance with that request. If you were to offer more information on the “Locate an Executive Coach” section of your site, you could be approved for those keywords.</p>
<p>You may be interested to know that Yahoo! is developing a new advertiser interface that will offer business owners a more powerful advertising experience, and we plan to roll this interface out during the second half of this year.</p>
<p>I understand that there are several things in your account that you would like changed, and I would just like to let you know that we take advertiser feedback very seriously as we are always striving to improve our services. We welcome any additional feedback you may have.</p>
<p>Please do not hesitate to contact us if we can be of any further assistance. Thank you for choosing Yahoo! Search Marketing!</p>
<p>Sincerely,</p>
<p>[NAME]</p>
<p>Executive Services</p>
<p>Yahoo! Search Marketing</p>
</blockquote>
<h3 id="总而言之-结论"><a href="#总而言之-结论" class="headerlink" title="总而言之 - 结论"></a>总而言之 - 结论</h3><p>先是看完一遍，然后再翻译，自己写了一遍之后，觉得此篇文章教导我们的知识点并不多，但是却提出了几条很好的出发点，或者说基准点比较恰当一些。<br>实际问题，再具体分析吧，方法论只是让我们: 有理可依、有据可循!</p>
<p><strong>原文出处:</strong></p>
<blockquote><footer><strong>Jacob McMillen</strong><cite><a href="https://www.sitepoint.com/how-to-write-a-good-response-to-a-clientcustomer-complaint/" target="_blank" rel="external">How to write a good response to a client/customer complaint</a></cite></footer></blockquote>
<p>Disclaimer : If the violation of your copyright, please contact me, I will remove the first time. Thanks!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;How-to-write-a-good-response-to-a-client-customer-complaint&quot;&gt;&lt;a href=&quot;#How-to-write-a-good-response-to-a-client-customer-complaint&quot; class=&quot;headerlink&quot; title=&quot;How to write a good response to a client/customer complaint&quot;&gt;&lt;/a&gt;How to write a good response to a client/customer complaint&lt;/h4&gt;&lt;p&gt;今天在&lt;a href=&quot;https://www.sitepoint.com&quot;&gt;Sitepoint&lt;/a&gt; - &lt;a href=&quot;https://www.sitepoint.com&quot;&gt;https://www.sitepoint.com&lt;/a&gt; 看到了这一篇文章，觉得还不错，所以尝试翻译成了中文版，供以后参考。&lt;/p&gt;
&lt;p&gt;在日常工作我们常常会遇到各种各样的客户投诉。&lt;/p&gt;
&lt;p&gt;也许你的产品或者服务都是最一流的！也许你的客户也是最好的！&lt;/p&gt;
&lt;p&gt;但是最终还是避免不了，因为我们始终都会遇到客户投诉。&lt;/p&gt;
&lt;p&gt;今天，我们就来讨论一下为什么顾客或客户的投诉对于我们的业务来说是一笔巨大的资产，并且通过一封投诉回复邮件示例来说明.&lt;/p&gt;
    
    </summary>
    
      <category term="Entrepreneur" scheme="http://blog.raultang.com/categories/Entrepreneur/"/>
    
    
      <category term="customer service" scheme="http://blog.raultang.com/tags/customer-service/"/>
    
      <category term="how to get customers" scheme="http://blog.raultang.com/tags/how-to-get-customers/"/>
    
      <category term="Marketing" scheme="http://blog.raultang.com/tags/Marketing/"/>
    
  </entry>
  
  <entry>
    <title>Google Resizer 响应式网站在线测试工具</title>
    <link href="http://blog.raultang.com/Tools/Google-Tools/google-resizer/"/>
    <id>http://blog.raultang.com/Tools/Google-Tools/google-resizer/</id>
    <published>2017-01-09T03:06:41.000Z</published>
    <updated>2017-01-09T03:32:57.923Z</updated>
    
    <content type="html"><![CDATA[<p>谷歌推出了一款免费的响应式网站测试工具：Google Resizer</p>
<p>我们可直接在Google Resizer平台上测试站点在不同尺寸设备中的显示、使用等情况。</p>
<a id="more"></a>
<p>官网地址: Google Resizer - <a href="https://material.io/resizer/" target="_blank" rel="external">https://material.io/resizer/</a>  –&gt; 此地址需要使用VPN<br>Google Resizer中文网站: <a href="http://www.resizer.cn/" target="_blank" rel="external">http://www.resizer.cn/</a>           –&gt; 不需要使用VPN</p>
<p>Resizer平台的使用非常简单，只需输入网址，便可模拟站点在PC端、平板、手机等不同设备中的显示、使用情况。Resizer平台上内置了多种设备尺寸规格，且可实现实时效果预览。</p>
<p>个人觉得是一个比较方便的在线测试工具，除了模拟站点在不同设备中的显示效果外，Google Resizer最大的优势在于，可模拟网站在不同设备中的实际使用情况，如页面跳转、下拉菜单选择等。</p>
<p>如果需要同时测试或预览一下响应式网站，还是非常方便的，只能大概的预览一下整体网站显示效果，如果有细节问题，还需要使用DevTools等工具进行检查与修正.</p>
<img src="/Tools/Google-Tools/google-resizer/google-resizer.png" alt="Google Resizer" title="Google Resizer">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谷歌推出了一款免费的响应式网站测试工具：Google Resizer&lt;/p&gt;
&lt;p&gt;我们可直接在Google Resizer平台上测试站点在不同尺寸设备中的显示、使用等情况。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.raultang.com/categories/Tools/"/>
    
      <category term="Google Tools" scheme="http://blog.raultang.com/categories/Tools/Google-Tools/"/>
    
    
      <category term="Test tools" scheme="http://blog.raultang.com/tags/Test-tools/"/>
    
      <category term="Google Resizer" scheme="http://blog.raultang.com/tags/Google-Resizer/"/>
    
  </entry>
  
  <entry>
    <title>使用Vocalizer.js喊出自己的名字!</title>
    <link href="http://blog.raultang.com/Tutorial/Vocalizer-js/Name_Vocalizer/"/>
    <id>http://blog.raultang.com/Tutorial/Vocalizer-js/Name_Vocalizer/</id>
    <published>2017-01-03T10:14:23.000Z</published>
    <updated>2017-01-09T04:48:08.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Pronounce-Names-Right"><a href="#Pronounce-Names-Right" class="headerlink" title="Pronounce Names Right!"></a>Pronounce Names Right!</h4><h5 id="Improving-The-UX-Of-Names-With-Vocalizer-js"><a href="#Improving-The-UX-Of-Names-With-Vocalizer-js" class="headerlink" title="Improving The UX Of Names With Vocalizer.js"></a>Improving The UX Of Names With Vocalizer.js</h5><p>今天在逛smashingmagazine的时候发现了<strong>@Atif Azam</strong>写的一个Vocalizer的组件。<br>我也试着添加到自己的博客上。</p>
<h5 id="实现步骤如下"><a href="#实现步骤如下" class="headerlink" title="实现步骤如下:"></a>实现步骤如下:</h5><h5 id="1-首先，到-Atif-Azam-的官方Github上下载Vocalizer-js组件，并引用如下："><a href="#1-首先，到-Atif-Azam-的官方Github上下载Vocalizer-js组件，并引用如下：" class="headerlink" title="1. 首先，到@Atif Azam 的官方Github上下载Vocalizer.js组件，并引用如下："></a>1. 首先，到<strong>@Atif Azam</strong> 的官方Github上下载Vocalizer.js组件，并引用如下：</h5><p>官方Github仓库:<a href="https://github.com/atifazam/vocalizer" target="_blank" rel="external">https://github.com/atifazam/vocalizer</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vocalizer/1.0.0/vocalizer.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="2-添加Vocalizer标签"><a href="#2-添加Vocalizer标签" class="headerlink" title="2. 添加Vocalizer标签"></a>2. 添加Vocalizer标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"vocalizer"</span> <span class="attr">data-source</span>=<span class="string">"auto"</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"vocalizer"</span> <span class="attr">data-source</span>=<span class="string">"/media/名字.mp3 | m4a"</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在需要的位置添加此标签，span标签中对应写会喊出的名字，需要注意的是：</p>
<ol>
<li>如果data-source中写的是auto,会调用<a href="https://www.nameshouts.com" target="_blank" rel="external">NamesShouts</a> - <a href="https://www.nameshouts.com/" target="_blank" rel="external">https://www.nameshouts.com/</a>  进行查找名字读音，可能会不太准确或者匹配错误.</li>
</ol>
<p>此时我们已经完成了Vocalizer的功能增强.</p>
<img src="/Tutorial/Vocalizer-js/Name_Vocalizer/Vocalizer.png" alt="myVocalizer" title="myVocalizer">
<h5 id="3-完整拼出自己的名字"><a href="#3-完整拼出自己的名字" class="headerlink" title="3. 完整拼出自己的名字"></a>3. 完整拼出自己的名字</h5><p>昨天，我只是喊出一部分的名字，今天完整的制作一下自己名字的音频。</p>
<p><strong> 3.1. 搜索自己名字的音频 </strong></p>
<p>   我发现<a href="https://www.nameshouts.com" target="_blank" rel="external">NamesShouts</a> - <a href="https://www.nameshouts.com/" target="_blank" rel="external">https://www.nameshouts.com/</a> 还是非常好用的。在这里搜索出了自己的名字。<br>   直接键入自己的名字即可（目前只测试了英文）。此站点会搜索出相关的音频。</p>
   <img src="/Tutorial/Vocalizer-js/Name_Vocalizer/myname.png" alt="myName" title="myName">
<p>   每一个单词都会有一个mp3格式的音频，可以供下载。<br>   <strong>下载方式：</strong> 右键名字单词即可打开对应音频文件下载链接，保存即可。<br>   如果需要自己名字读的慢一些，可以打开“小蜗牛”的开关，则可以切换了。<br>   可能会有多个地区的读音可供参考。</p>
<p><strong> 3.2. 制作名字音频合并 </strong></p>
<p>由于名字的音频是两个mp3的文件，我们需要合并一下（不是自己电脑的，没有安装本地应用）。</p>
<p>推荐两个在线版的音频处理网站:</p>
<p>   <a href="http://audio-joiner.com/" target="_blank" rel="external">http://audio-joiner.com/</a> - Audio Joiner –&gt; 个人感觉非常好使. 界面清爽，功能专注，视频和音频的剪切、拼接都可以分步完成.<br>   他们的主站点: <a href="http://123apps.com/" target="_blank" rel="external">http://123apps.com/</a></p>
<p>此时完成了名字音频的合并，我们可以重新添加一下音频到博客了。</p>
<p><strong> 个人建议：</strong></p>
<ol>
<li>使用windows的Voice Recorder自己录一个<em>.m4a文件，经过测试Vocalizer.js也支持</em>.m4a格式;</li>
<li>使用<a href="https://zh.forvo.com" target="_blank" rel="external">https://zh.forvo.com</a> 中的读音会比较标准。</li>
<li>记得写出正确的相对路径即可。</li>
</ol>
<p><strong> 参考资料：</strong><br><a href="https://github.com/atifazam/vocalizer" target="_blank" rel="external">https://github.com/atifazam/vocalizer</a><br><a href="https://www.smashingmagazine.com/2016/12/improving-ux-names-vocalizer-js/" target="_blank" rel="external">https://www.smashingmagazine.com/2016/12/improving-ux-names-vocalizer-js/</a><br><a href="http://atifaz.am/blog/vocalizer-help-others-pronounce-your-name-correctly.html" target="_blank" rel="external">http://atifaz.am/blog/vocalizer-help-others-pronounce-your-name-correctly.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Pronounce-Names-Right&quot;&gt;&lt;a href=&quot;#Pronounce-Names-Right&quot; class=&quot;headerlink&quot; title=&quot;Pronounce Names Right!&quot;&gt;&lt;/a&gt;Pronounce Names Right!
    
    </summary>
    
      <category term="Tutorial" scheme="http://blog.raultang.com/categories/Tutorial/"/>
    
      <category term="Vocalizer.js" scheme="http://blog.raultang.com/categories/Tutorial/Vocalizer-js/"/>
    
    
      <category term="Vocalizer.js" scheme="http://blog.raultang.com/tags/Vocalizer-js/"/>
    
      <category term="Inspiration" scheme="http://blog.raultang.com/tags/Inspiration/"/>
    
      <category term="User Experience" scheme="http://blog.raultang.com/tags/User-Experience/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Microservices - 微服务架构之旅</title>
    <link href="http://blog.raultang.com/TECH/Microservices/Introduction_to_Microservices/"/>
    <id>http://blog.raultang.com/TECH/Microservices/Introduction_to_Microservices/</id>
    <published>2016-12-12T09:14:03.009Z</published>
    <updated>2016-12-22T06:36:42.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介-amp-前言"><a href="#简介-amp-前言" class="headerlink" title="简介&amp;前言"></a>简介&amp;前言</h4><p><strong>原作者:</strong> Chris Richardson，是世界著名的软件大师，经典技术著作《POJOS IN ACTION》一书的作者，也是 cloudfoundry.com 最初的创始人，他的研究领域包括 Spring、Scala、微服务架构设计、NoSQL 数据库、分布式数据管理、事件驱动的应用编程等。Chris Richardson 与 Martin Fowler、Sam Newman、Adrian Cockcroft 等并称为世界十大软件架构师。Chris 与家人居住在美国加州奥克兰市的海滨小镇，他定期为企业提供微服务设计培训和实战项目的架构咨询服务。</p>
<h4 id="微服务架构系列有7篇"><a href="#微服务架构系列有7篇" class="headerlink" title="微服务架构系列有7篇:"></a>微服务架构系列有7篇:</h4><h5 id="1-this-article"><a href="#1-this-article" class="headerlink" title="1.  (this article)"></a>1. <a href="/TECH/Microservices/Introduction_to_Microservices/" title="微服务架构简介">微服务架构简介</a> (this article)</h5><h5 id="2-构建微服务-使用API-Gateway"><a href="#2-构建微服务-使用API-Gateway" class="headerlink" title="2. 构建微服务: 使用API Gateway"></a>2. 构建微服务: 使用API Gateway</h5><h5 id="3-构建微服务-微服务构架内的进程间通信"><a href="#3-构建微服务-微服务构架内的进程间通信" class="headerlink" title="3. 构建微服务: 微服务构架内的进程间通信"></a>3. 构建微服务: 微服务构架内的进程间通信</h5><h5 id="4-微服务构架的服务发现"><a href="#4-微服务构架的服务发现" class="headerlink" title="4. 微服务构架的服务发现"></a>4. 微服务构架的服务发现</h5><h5 id="5-微服务事件驱动的数据管理"><a href="#5-微服务事件驱动的数据管理" class="headerlink" title="5. 微服务事件驱动的数据管理"></a>5. 微服务事件驱动的数据管理</h5><h5 id="6-微服务的部署策略"><a href="#6-微服务的部署策略" class="headerlink" title="6. 微服务的部署策略"></a>6. 微服务的部署策略</h5><h5 id="7-重构单应用到微服务"><a href="#7-重构单应用到微服务" class="headerlink" title="7. 重构单应用到微服务"></a>7. 重构单应用到微服务</h5><!-- main body -->
<ul>
<li>Microservices e-Book: <a href="https://www.nginx.com/resources/library/designing-deploying-microservices/" target="_blank" rel="external">Microservices: From Design to Deployment</a></li>
</ul>
<h3 id="Microservices-现状"><a href="#Microservices-现状" class="headerlink" title="Microservices 现状:"></a>Microservices 现状:</h3><p>当下微服务引起广泛关注，成为文章、博客、社交媒体讨论和大会演讲的热点; 在 Gartner 的”Hype Cycle”中也正迅速排名靠前。与此同时,在软件社区也有一些人们认为微服务并非新事物。</p>
<p>反对者认为微服务只是 SOA （Service Oriented Architecture）的二度包装。然而，无论是追捧还是质疑，微服务架构模式拥有显著优势, 特别是涉及到敏捷开发和交付使复杂的企业应用程序时。</p>
<p><strong> 本文是微服务架构系列的第一篇：主是介绍了微服务设计，构建以及部署。</strong><br>你将进一步了解和走近微服务构架，并且比较分析它与传统单体应用架构模式. 本系列将会讲解到微服务架构的各种构成要素。还将了解到微服务架构的优势和弊端，并且是否对你的项目有帮助，和如何使用它。</p>
<ul>
<li>个人觉得既然这个技术架构，这么火爆，了解一下也不是坏事情，所以一起来看看吧。</li>
</ul>
<a id="more"></a>
<h3 id="Building-Monolithic-Applications-构建单体应用"><a href="#Building-Monolithic-Applications-构建单体应用" class="headerlink" title="Building Monolithic Applications - 构建单体应用"></a>Building Monolithic Applications - 构建单体应用</h3><p>首先，想象一下假如我们要新开发一款以”Uber” &amp; “Hailo”进行竞争为目的打车软件，我们经过一系列的筹备会议和需求收集之后，我们会创建一个新项目，或者通过Rails, Spring Boot, Play, or Maven等进行开发。此全新APP应该是一个<a href="http://www.infoq.com/news/2014/10/exploring-hexagonal-architecture" target="_blank" rel="external">六边形架构</a>。</p>
<p>如下图所示:</p>
<img src="/TECH/Microservices/Introduction_to_Microservices/microservices-part1-1_monolithic-architecture.png" alt="monolithic-architecture" title="monolithic-architecture">
<p>此应用的核心区域是：业务逻辑，它是由定义服务、域对象和事件的模块来实现的。包围核心区域的是各种适配接口与外部交互。例如：数据库访问组件，消息组件，以及Web UI和对外提供的API.</p>
<p>尽管有着逻辑化的模块架构，整个应用还是被整体的打包和部署.<br>实际的格式需要依赖于整个应用的开发语言和框架，例如：一部分Java应用程序通常都是被打包成WAR包，并且部署到Tomcat或Jetty服务容器中.<br>另一部分Java应用程序则是被打包成能够自执行的JARs格式. 与此类推，Rails和Node.js应用则被打包成一个目录结构.</p>
<p>此类应用的编写风格已经是非常普遍了，主要是因为现在的IDEs工具都注重于构建单体应用。此类应用也非常便于测试。我们可以非常轻松的实现End-to-End的测试，以及通过Selenium进行UI测试。单体应用部署也非常方便，一般来说，我们只需要复制打包好的程序到服务器即可，我们也可能通过复制多份程序并行运行，进行负载均衡。如果是项目早期还是非常有效的。</p>
<h3 id="Marching-Towards-Monolithic-Hell-迈向单体应用的地狱"><a href="#Marching-Towards-Monolithic-Hell-迈向单体应用的地狱" class="headerlink" title="Marching Towards Monolithic Hell - 迈向单体应用的地狱"></a>Marching Towards Monolithic Hell - 迈向单体应用的地狱</h3><p>非常不幸，对于单体应用有着巨大的局限性，一个成功的应用都有着一个习惯 - 经过久而久之的成长与更新，最终都会变的非常庞大。在每一个小阶段（Sprint）中，我们的开发团队都会实现小功能，增加许多行代码。然后，经过几年以后，我们的小而简单的应用程序将会变的异常巨大。举个栗子来说：<br>我最近和一个编写依赖分析工具的开发者交流，他正在开发一款分析工具，来分析他们应用（包括几百万行代码）中的几千个 JARs 的依赖。我肯定花了大量的开发人员的共同努力多年来创建这样的”野兽”。</p>
<p>一旦我们的应用程序变成一个庞大，复杂的单体应用时，我们的开发团队将会处于一个非常痛苦的世界，尝试任何敏捷开发和交付都将陷入困境。最主要的问题在于此时的应用已经变得极其复杂。它会复杂且庞大到任何一个开发者都无法完全理解了。因而造成的结果是，修复Bugs和实现一些新功能变的非常困难和花费更多的时间。更多的是，这一趋势会逐渐变成（水准）<strong>螺旋式下跌</strong>。如果基础代码（Codebase)非常难以理解，也很难做出正确的改变，直至最后我们会深陷庞大的、且无法估量的泥淖之中 - <a href="http://www.laputan.org/mud/" target="_blank" rel="external">big ball of mud</a> - <a href="http://www.laputan.org/mud。" target="_blank" rel="external">http://www.laputan.org/mud。</a></p>
<p>待续….</p>
<h3 id="Microservices-–-Tackling-the-Complexity-应付单体应用复杂度"><a href="#Microservices-–-Tackling-the-Complexity-应付单体应用复杂度" class="headerlink" title="Microservices – Tackling the Complexity - 应付单体应用复杂度"></a>Microservices – Tackling the Complexity - 应付单体应用复杂度</h3>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介-amp-前言&quot;&gt;&lt;a href=&quot;#简介-amp-前言&quot; class=&quot;headerlink&quot; title=&quot;简介&amp;amp;前言&quot;&gt;&lt;/a&gt;简介&amp;amp;前言&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;原作者:&lt;/strong&gt; Chris Richardson，是世界著名的软件大师，经典技术著作《POJOS IN ACTION》一书的作者，也是 cloudfoundry.com 最初的创始人，他的研究领域包括 Spring、Scala、微服务架构设计、NoSQL 数据库、分布式数据管理、事件驱动的应用编程等。Chris Richardson 与 Martin Fowler、Sam Newman、Adrian Cockcroft 等并称为世界十大软件架构师。Chris 与家人居住在美国加州奥克兰市的海滨小镇，他定期为企业提供微服务设计培训和实战项目的架构咨询服务。&lt;/p&gt;
&lt;h4 id=&quot;微服务架构系列有7篇&quot;&gt;&lt;a href=&quot;#微服务架构系列有7篇&quot; class=&quot;headerlink&quot; title=&quot;微服务架构系列有7篇:&quot;&gt;&lt;/a&gt;微服务架构系列有7篇:&lt;/h4&gt;&lt;h5 id=&quot;1-this-article&quot;&gt;&lt;a href=&quot;#1-this-article&quot; class=&quot;headerlink&quot; title=&quot;1.  (this article)&quot;&gt;&lt;/a&gt;1. &lt;a href=&quot;/TECH/Microservices/Introduction_to_Microservices/&quot; title=&quot;微服务架构简介&quot;&gt;微服务架构简介&lt;/a&gt; (this article)&lt;/h5&gt;&lt;h5 id=&quot;2-构建微服务-使用API-Gateway&quot;&gt;&lt;a href=&quot;#2-构建微服务-使用API-Gateway&quot; class=&quot;headerlink&quot; title=&quot;2. 构建微服务: 使用API Gateway&quot;&gt;&lt;/a&gt;2. 构建微服务: 使用API Gateway&lt;/h5&gt;&lt;h5 id=&quot;3-构建微服务-微服务构架内的进程间通信&quot;&gt;&lt;a href=&quot;#3-构建微服务-微服务构架内的进程间通信&quot; class=&quot;headerlink&quot; title=&quot;3. 构建微服务: 微服务构架内的进程间通信&quot;&gt;&lt;/a&gt;3. 构建微服务: 微服务构架内的进程间通信&lt;/h5&gt;&lt;h5 id=&quot;4-微服务构架的服务发现&quot;&gt;&lt;a href=&quot;#4-微服务构架的服务发现&quot; class=&quot;headerlink&quot; title=&quot;4. 微服务构架的服务发现&quot;&gt;&lt;/a&gt;4. 微服务构架的服务发现&lt;/h5&gt;&lt;h5 id=&quot;5-微服务事件驱动的数据管理&quot;&gt;&lt;a href=&quot;#5-微服务事件驱动的数据管理&quot; class=&quot;headerlink&quot; title=&quot;5. 微服务事件驱动的数据管理&quot;&gt;&lt;/a&gt;5. 微服务事件驱动的数据管理&lt;/h5&gt;&lt;h5 id=&quot;6-微服务的部署策略&quot;&gt;&lt;a href=&quot;#6-微服务的部署策略&quot; class=&quot;headerlink&quot; title=&quot;6. 微服务的部署策略&quot;&gt;&lt;/a&gt;6. 微服务的部署策略&lt;/h5&gt;&lt;h5 id=&quot;7-重构单应用到微服务&quot;&gt;&lt;a href=&quot;#7-重构单应用到微服务&quot; class=&quot;headerlink&quot; title=&quot;7. 重构单应用到微服务&quot;&gt;&lt;/a&gt;7. 重构单应用到微服务&lt;/h5&gt;&lt;!-- main body --&gt;
&lt;ul&gt;
&lt;li&gt;Microservices e-Book: &lt;a href=&quot;https://www.nginx.com/resources/library/designing-deploying-microservices/&quot;&gt;Microservices: From Design to Deployment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Microservices-现状&quot;&gt;&lt;a href=&quot;#Microservices-现状&quot; class=&quot;headerlink&quot; title=&quot;Microservices 现状:&quot;&gt;&lt;/a&gt;Microservices 现状:&lt;/h3&gt;&lt;p&gt;当下微服务引起广泛关注，成为文章、博客、社交媒体讨论和大会演讲的热点; 在 Gartner 的”Hype Cycle”中也正迅速排名靠前。与此同时,在软件社区也有一些人们认为微服务并非新事物。&lt;/p&gt;
&lt;p&gt;反对者认为微服务只是 SOA （Service Oriented Architecture）的二度包装。然而，无论是追捧还是质疑，微服务架构模式拥有显著优势, 特别是涉及到敏捷开发和交付使复杂的企业应用程序时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 本文是微服务架构系列的第一篇：主是介绍了微服务设计，构建以及部署。&lt;/strong&gt;&lt;br&gt;你将进一步了解和走近微服务构架，并且比较分析它与传统单体应用架构模式. 本系列将会讲解到微服务架构的各种构成要素。还将了解到微服务架构的优势和弊端，并且是否对你的项目有帮助，和如何使用它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人觉得既然这个技术架构，这么火爆，了解一下也不是坏事情，所以一起来看看吧。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TECH" scheme="http://blog.raultang.com/categories/TECH/"/>
    
      <category term="Microservices" scheme="http://blog.raultang.com/categories/TECH/Microservices/"/>
    
    
      <category term="cloud" scheme="http://blog.raultang.com/tags/cloud/"/>
    
      <category term="微服务架构" scheme="http://blog.raultang.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
      <category term="microservices" scheme="http://blog.raultang.com/tags/microservices/"/>
    
      <category term="monolithic application" scheme="http://blog.raultang.com/tags/monolithic-application/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github Pages 个人博客构建指南</title>
    <link href="http://blog.raultang.com/Tutorial/Hexo-Tutorial/new-hexo/"/>
    <id>http://blog.raultang.com/Tutorial/Hexo-Tutorial/new-hexo/</id>
    <published>2016-12-05T09:40:31.465Z</published>
    <updated>2017-05-11T08:23:55.072Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介-amp-前言"><a href="#简介-amp-前言" class="headerlink" title="简介&amp;前言"></a>简介&amp;前言</h4><p>早些时候，已经了解了一些类似的博客框架，但是一直也没有着手实践一回，最近使用Hexo构建了一个自己的博客，在此记录下Hexo + Github Pages博客构建过程。</p>
<h4 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Hexo版本信息:</p>
<ul>
<li>hexo: 3.2.2</li>
<li>hexo-cli: 1.0.2</li>
</ul>
<h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p>安装 Hexo 还是相当简单的，但是开始Hexo安装之前，必须检查电脑中是否已安装下列应用程序:</p>
<ul>
<li><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>        - <a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a></li>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a> - <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></li>
</ul>
<p>建议可以再安装一个TortoiseGit工具来做为Github代码的部署工作. - <a href="https://tortoisegit.org/" target="_blank" rel="external">https://tortoisegit.org/</a></p>
<p>安装并配置完成Nodejs和Git环境设置之后, 就可以开始Hexo博客之旅了.</p>
<h5 id="1-先在Github中创建一个代码仓库，GitHub官方文档-https-pages-github-com"><a href="#1-先在Github中创建一个代码仓库，GitHub官方文档-https-pages-github-com" class="headerlink" title="1. 先在Github中创建一个代码仓库，GitHub官方文档 - https://pages.github.com/"></a>1. 先在Github中创建一个代码仓库，GitHub官方文档 - <a href="https://pages.github.com/" target="_blank" rel="external">https://pages.github.com/</a></h5><p>在此步骤中只需要注意仓库名称格式:</p>
<img src="/Tutorial/Hexo-Tutorial/new-hexo/create-repo.png" alt="create-repo" title="create-repo">
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"repository name"</span>.github.io.</div></pre></td></tr></table></figure>
<p>把”repository name”替换成自己想要的名称即可.</p>
<h5 id="2-使用Nodejs-NPM安装Hexo环境"><a href="#2-使用Nodejs-NPM安装Hexo环境" class="headerlink" title="2. 使用Nodejs - NPM安装Hexo环境"></a>2. 使用Nodejs - NPM安装Hexo环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装完成之后可以使用以下命令查看是否安装成功.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v --&gt; 查看hexo版本信息</div></pre></td></tr></table></figure>
<h5 id="3-使用Git或者TortoiseGit把代码仓库拉到本地，使用CMD进入本地仓库目录，初始化Hexo项目"><a href="#3-使用Git或者TortoiseGit把代码仓库拉到本地，使用CMD进入本地仓库目录，初始化Hexo项目" class="headerlink" title="3. 使用Git或者TortoiseGit把代码仓库拉到本地，使用CMD进入本地仓库目录，初始化Hexo项目"></a>3. 使用Git或者TortoiseGit把代码仓库拉到本地，使用CMD进入本地仓库目录，初始化Hexo项目</h5><p>P.S. 建议使用两个代码仓库，一个是源项目（Hexo编译），一个是正式博客的。因为Hexo在部署的时候会清空github仓库全量部署编译后的项目文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"your local path"</span></div><div class="line">hexo init --&gt; 初始化Hexo项目</div></pre></td></tr></table></figure>
<p>进行到这一步之后，Hexo(3.2.x版本)会自动生成所有组件，并下载好npm依赖.不需要再执行npm i.<br>此时已经生成了一个官方基础版本的博客了.可以使用以下命令进行本地预览:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"your project path"</span></div><div class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</div><div class="line"></div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>Hexo会运行在<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 或 <a href="http://127.0.0.1:4000/" target="_blank" rel="external">http://127.0.0.1:4000/</a>, 在浏览器中输入此地址即可查看了.</p>
<h5 id="4-简单配置Hexo-并部署博客到Github"><a href="#4-简单配置Hexo-并部署博客到Github" class="headerlink" title="4. 简单配置Hexo,并部署博客到Github"></a>4. 简单配置Hexo,并部署博客到Github</h5><p>暂时先使用官方默认主题，进行Hexo配置. 推荐使用<a href="https://atom.io" target="_blank" rel="external">Atom</a> 进行博客项目编辑.</p>
<p>如果不喜欢官方的默认的主题风格，可以去Hexo官方网站查找更多主题。找一个自己喜欢的!</p>
<ul>
<li><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo主题</a>        - <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></li>
</ul>
<p>使用编辑器（Atom)，打开Hexo项目根目录中的_config.yml,此文件里面有很多配置，可以先不管，大多数都是比较简单的。<br>此时，我们只需要找滚动到文件底部找到deploy进行Hexo git部署配置.</p>
<p>其实，官方已经有很清楚的文档了, <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>  - <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git   --&gt; 新版本中只能配置git</div><div class="line">  repo: your repository url --&gt; https模式的</div><div class="line">  branch: master  --&gt; your branch name.</div><div class="line">  user: your github username</div></pre></td></tr></table></figure>
<p>保存以上配置，Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将博客部署Github.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="string">"your local path"</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>使用此命令是可能会出现以下错误信息.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy ERROR Deployer not found: git</div></pre></td></tr></table></figure>
<p>此问题是因为没有安装hexo deployer git插件.使用以下命令进行安装，再次启动部署.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>正常情况应该会成功部署博客到Github博客代码仓库.如果遇到其它问题，可以留言提问.</p>
<h5 id="5-开启Github代码仓库的Github-pages功能"><a href="#5-开启Github代码仓库的Github-pages功能" class="headerlink" title="5. 开启Github代码仓库的Github pages功能."></a>5. 开启Github代码仓库的Github pages功能.</h5><p>打开博客所在的Github代码仓库，进入设置，一般是最后一个选项 - Settings, 如下图所示:</p>
<img src="/Tutorial/Hexo-Tutorial/new-hexo/repo-setting.png" alt="repository setting" title="repository setting">
<p>在Source的区域位置选择master作为博客的代码分支.目前Github只支持3种方式:</p>
<ul>
<li>master       –&gt; Use the master branch for GitHub Pages</li>
<li>master/doc   –&gt; Use only the /docs folder for GitHub Pages.</li>
<li>none         –&gt; Disable Github page</li>
</ul>
<p>设置完成Github pages功能，一般此页面会提示当前博客被部署到什么URL, 在访问之前，最好先检查一下代码是否完全部署到当前代码仓库.</p>
<p>Github pages默认提供的访问路径为:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">" https://yourusername.github.io/repositoryname.github.io/ "</span></div><div class="line"></div><div class="line">Example: https://test.github.io/myblog.github.io/</div></pre></td></tr></table></figure>
<p>到此，我们已经成功部署了官方默认版本的Hexo博客到Github了. 恭喜!</p>
<h5 id="6-设置Custom-domain-自定义域名"><a href="#6-设置Custom-domain-自定义域名" class="headerlink" title="6. 设置Custom domain(自定义域名)."></a>6. 设置Custom domain(自定义域名).</h5><p>使用Github提供的默认域名，不是特别很友好，我们可以在此配置一个自定义的域名。现在的版本只需要在此处设置即可。</p>
<ol>
<li>先申请一个自己的域名;</li>
<li>在域名解析中设置一个2级子域名CNAME指向上面提到的域名<a href="https://yourusername.github.io" target="_blank" rel="external">https://yourusername.github.io</a> 即可;一般很快可以访问了，主要基于DNS解析速度.</li>
</ol>
<img src="/Tutorial/Hexo-Tutorial/new-hexo/repo-cname.png" alt="CDN Setting" title="CDN Setting">
<h5 id="7-添加百度CDN，为你的博客加速"><a href="#7-添加百度CDN，为你的博客加速" class="headerlink" title="7. 添加百度CDN，为你的博客加速"></a>7. 添加百度CDN，为你的博客加速</h5><p>国内访问Github pages速度还比较慢的，那这么个时候就需要一个CDN加速度，来帮助我们一下了.</p>
<ol>
<li>先申请一个百度账号，然后到百度云 - <a href="http://cloud.baidu.com" target="_blank" rel="external">http://cloud.baidu.com</a> 上去添加自己的博客网站，百度有一个免费版.</li>
<li>添加自己的域名到百度云中，然后做一个CNAME映射到百度云的CDN服务器，然后百度云再映射到Github pages即可.</li>
</ol>
<h5 id="8-博客的性能优化"><a href="#8-博客的性能优化" class="headerlink" title="8. 博客的性能优化"></a>8. 博客的性能优化</h5><ol>
<li><p>静态文件压缩<br>|- 图片进行无损压缩;<br>|- html,css,js进行合并压缩;<br>关于HTML,CSS,JS文件的合并压缩，我进行了以下操作，由于Hexo有一些引用的问题，所以并没有进行合并操作，会有大量的路径需要修改，所以我只进行了HTML,JS,Image的压缩.<br>具体操作流程如下:</p>
<p>1.本次使用gulp作为构建工具, 先全局安装gulp;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install glup</div></pre></td></tr></table></figure>
<p>2.安装相关的合并压缩插件;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install gulp-htmlclean  --save</div><div class="line">npm install gulp-htmlmin    --save</div><div class="line">npm install gulp-imagemin   --save</div><div class="line">npm install gulp-minify-css --save</div><div class="line">npm install gulp-uglify     --save</div></pre></td></tr></table></figure>
<p>执行完成以上命令之后，它们的依赖信息会被保存到Hexo根目录/package.json中.</p>
<p>3.创建gulpfile.js, 编写构建命令文件; 此文件需放在Hexo根目录;<br>   本次注释了关于CSS的压缩，因为minify-css会把某些CSS压坏了.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 public 目录 css</span></div><div class="line"></div><div class="line"><span class="comment">//gulp.task('minify-css', function() &#123;</span></div><div class="line"><span class="comment">//    return gulp.src('./public/**/*.css')</span></div><div class="line"><span class="comment">//        .pipe(minifycss())</span></div><div class="line"><span class="comment">//        .pipe(gulp.dest('./public/test'));</span></div><div class="line"><span class="comment">//&#125;);</span></div><div class="line"></div><div class="line"><span class="comment">// 压缩 public 目录 html</span></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">         <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">minifyJS</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 public/js 目录 js</span></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩图片任务</span></div><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到图片</span></div><div class="line">    gulp.src(<span class="string">'./public/**/*.png'</span>)</div><div class="line">    <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">    <span class="comment">// 3. 另存图片</span></div><div class="line">       .pipe(gulp.dest(<span class="string">'./public/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'minify-html'</span>,<span class="string">'minify-js'</span>,<span class="string">'images'</span>]);</div></pre></td></tr></table></figure>
<p>4.在Hexo根目录执行以下命令即可;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean &amp;&amp; hexo generate</div><div class="line">gulp   --&gt; 压缩合并</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>需要注意的是:使用hexo server并不能看到压缩后的效果，有可能是我设置的有问题，但是部署到github之后就正常了.不过可以先hexo sever进行查看是否有问题。</p>
</li>
<li><p>图片资源CDN加速<br>|- 如果你是针对国内的话，可以使用七牛云 - <a href="http://qiniu.com" target="_blank" rel="external">http://qiniu.com</a> 的空间存放图片.他们也有一个免费的计划，访问量不大的话可以使用;</p>
</li>
<li>SEO优化<br>|- 主动提交你的博客到百度或者Google等各大搜索引擎，提高收录概率;</li>
</ol>
<p>hexo clean &amp;&amp; hexo generate &amp;&amp; gulp &amp;&amp; hexo deploy</p>
<h5 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h5><ol>
<li>Hexo官方文档 - <a href="https://hexo.io/docs/index.html" target="_blank" rel="external">https://hexo.io/docs/index.html</a></li>
<li>博客主题     - <a href="https://github.com/ppoffice" target="_blank" rel="external">https://github.com/ppoffice</a></li>
</ol>
<img src="/Tutorial/Hexo-Tutorial/new-hexo/new-hexo.png" alt="Hexo" title="Hexo">
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介-amp-前言&quot;&gt;&lt;a href=&quot;#简介-amp-前言&quot; class=&quot;headerlink&quot; title=&quot;简介&amp;amp;前言&quot;&gt;&lt;/a&gt;简介&amp;amp;前言&lt;/h4&gt;&lt;p&gt;早些时候，已经了解了一些类似的博客框架，但是一直也没有着手实践一回，最近使用Hexo构建了一个自己的博客，在此记录下Hexo + Github Pages博客构建过程。&lt;/p&gt;
&lt;h4 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hexo？&quot;&gt;&lt;/a&gt;什么是 Hexo？&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="http://blog.raultang.com/categories/Tutorial/"/>
    
      <category term="Hexo Tutorial" scheme="http://blog.raultang.com/categories/Tutorial/Hexo-Tutorial/"/>
    
    
      <category term="Hexo Tutorial" scheme="http://blog.raultang.com/tags/Hexo-Tutorial/"/>
    
  </entry>
  
</feed>
